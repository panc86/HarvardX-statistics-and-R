library(downloader)
url <- "https://raw.githubusercontent.com/genomicsclass/dagdata/master/inst/extdata/femaleControlsPopulation.csv"
filename <- basename(url)
download(url, destfile=filename)
x <- unlist( read.csv(filename) )
# make averages5
set.seed(1)
n <- 1000
averages5 <- vector("numeric",n)
for(i in 1:n){
X <- sample(x,5)
averages5[i] <- mean(X)
}
# make averages50
set.seed(1)
n <- 1000
averages50 <- vector("numeric",n)
for(i in 1:n){
X <- sample(x,50)
averages50[i] <- mean(X)
}
hist(averages5, main="With 5 random samples")
hist(averages50, main="With 50 random samples")
?par
par(mfrow=c(1, 2))
hist(averages5, main="With 5 random samples")
hist(averages50, main="With 50 random samples")
?hist
par(mfrow=c(1, 2))
limits <- c(range(x))
hist(averages5, main="With 5 random samples", xlim=limits)
hist(averages50, main="With 50 random samples", xlim=limits)
mean(averages50 <= 25) - mean(averages50 <= 23)
mu <- 23.9
sigma <- 0.43
pnorm(x, mu, sigma)
pnorm(25, mu, sigma)
pnorm(25, mu, sigma) - pnorm(23, mu, sigma)
library(dplyr)
library(downloader)
url <- "https://raw.githubusercontent.com/genomicsclass/dagdata/master/inst/extdata/mice_pheno.csv"
filename <- basename(url)
download(url, destfile=filename)
dat <- read.csv(filename)
dat <- na.omit( dat )
head(dat)
?filter
maleWeight <- filter(dat, Sex=="M" & Diet=="chow") %>% select(Bodyweight) %>% unlist
maleWeight
mean(maleChowBW)
# ex1
#' Use dplyr to create a vector x with the body weight of all males on the control (chow) diet.
#' Q: What is this population's average?
maleChowBW <- filter(dat, Sex=="M" & Diet=="chow") %>% select(Bodyweight) %>% unlist
mean(maleChowBW)
# ex1
#' Use dplyr to create a vector x with the body weight of all males on the control (chow) diet.
#' Q: What is this population's average?
x <- filter(dat, Sex=="M" & Diet=="chow") %>% select(Bodyweight) %>% unlist
mean(x)
# ex2
#' Now use the rafalib package and use the popsd() function to compute
#' the population standard deviation.
library(rafalib)
popsd(x)
set.seed(1)
mean(sample(x, 25))
# ex4
#' Use dplyr to create a vector y with the body weight of all males on
#' the high fat hf) diet.
#' Q: What is this population's average?
y <- filter(dat, Sex=="M" & Diet=="hf") %>% select(Bodyweight) %>% unlist
mean(y)
# ex5
#' Now use the rafalib package and use the popsd() function to compute
#' the population standard deviation.
popsd(y)
# ex6
#' Set the seed at 1. Take a random sample  Y  of size 25 from y.
#' Q: What is the sample average?
set.seed(1)
mean(sample(y, 25))
# ex3
#' Set the seed at 1. Take a random sample  X  of size 25 from x.
#' Q: What is the sample average?
set.seed(1)
X <- sample(x, 25)
mean(X)
# ex4
#' Use dplyr to create a vector y with the body weight of all males on
#' the high fat hf) diet.
#' Q: What is this population's average?
y <- filter(dat, Sex=="M" & Diet=="hf") %>% select(Bodyweight) %>% unlist
mean(y)
# ex5
#' Now use the rafalib package and use the popsd() function to compute
#' the population standard deviation.
popsd(y)
# ex6
#' Set the seed at 1. Take a random sample  Y  of size 25 from y.
#' Q: What is the sample average?
set.seed(1)
Y <- sample(y, 25)
mean(Y)
# ex7
#' What is the difference in absolute value between  y¯−x¯  and  Y¯−X¯?
y-x
# ex7
#' What is the difference in absolute value between  y¯−x¯  and  Y¯−X¯?
mean(y)-mean(x)
mean(Y)-mean(X)
# ex7
#' What is the difference in absolute value between  y¯−x¯  and  Y¯−X¯?
abs(mean(y)-mean(x) - mean(Y)-mean(X))
# ex7
#' What is the difference in absolute value between  y¯−x¯  and  Y¯−X¯?
mean(y)-mean(x) - mean(Y)-mean(X)
# ex7
#' What is the difference in absolute value between  y¯−x¯  and  Y¯−X¯?
mean(y)-mean(x)
mean(Y)-mean(X)
(mean(y)-mean(x)) - (mean(Y)-mean(X))
abs((mean(y)-mean(x)) - (mean(Y)-mean(X)))
# ex8
#' Repeat the above for females, this time setting the seed to 2.
#' Q: What is the difference in absolute value between  y¯−x¯  and  Y¯−X¯ ?
#' Make sure to set the seed to 2 before each sample() call.
#' This function should be called twice.
x <- filter(dat, Sex=="F" & Diet=="chow") %>% select(Bodyweight) %>% unlist
set.seed(2)
X <- sample(x, 25)
mean(X)
y <- filter(dat, Sex=="F" & Diet=="hf") %>% select(Bodyweight) %>% unlist
set.seed(2)
Y <- sample(y, 25)
mean(Y)
abs((mean(y)-mean(x)) - (mean(Y)-mean(X)))
# ex2
#' Now use the rafalib package and use the popsd() function to compute
#' the population standard deviation.
popsd(x)
# ex5
#' Now use the rafalib package and use the popsd() function to compute
#' the population standard deviation.
popsd(y)
popsd(x)
popsd(y)
# ex8
#' Repeat the above for females, this time setting the seed to 2.
#' Q: What is the difference in absolute value between  y¯−x¯  and  Y¯−X¯ ?
#' Make sure to set the seed to 2 before each sample() call.
#' This function should be called twice.
x <- filter(dat, Sex=="F" & Diet=="chow") %>% select(Bodyweight) %>% unlist
popsd(x)
set.seed(2)
X <- sample(x, 25)
mean(X)
y <- filter(dat, Sex=="F" & Diet=="hf") %>% select(Bodyweight) %>% unlist
popsd(y)
set.seed(2)
Y <- sample(y, 25)
mean(Y)
abs((mean(y)-mean(x)) - (mean(Y)-mean(X)))
# ex1
#' Use dplyr to create a vector x with the body weight of all males on the control (chow) diet.
#' Q: What is this population's average?
x <- filter(dat, Sex=="M" & Diet=="chow") %>% select(Bodyweight) %>% unlist
mean(x)
# ex1
#' Use dplyr to create a vector x with the body weight of all males on the control (chow) diet.
#' Q: What is this population's average?
x <- filter(dat, Sex=="M" & Diet=="chow") %>% select(Bodyweight) %>% unlist
# ex2
#' Now use the rafalib package and use the popsd() function to compute
#' the population standard deviation.
popsd(x)
# ex4
#' Use dplyr to create a vector y with the body weight of all males on
#' the high fat hf) diet.
#' Q: What is this population's average?
y <- filter(dat, Sex=="M" & Diet=="hf") %>% select(Bodyweight) %>% unlist
# ex5
#' Now use the rafalib package and use the popsd() function to compute
#' the population standard deviation.
popsd(y)
# ex1
#' Use dplyr to create a vector x with the body weight of all males on the control (chow) diet.
#' Q: What is this population's average?
x <- filter(dat, Sex=="M" & Diet=="chow") %>% select(Bodyweight) %>% unlist
# ex2
#' Now use the rafalib package and use the popsd() function to compute
#' the population standard deviation.
popsd(x)
# ex4
#' Use dplyr to create a vector y with the body weight of all males on
#' the high fat hf) diet.
#' Q: What is this population's average?
y <- filter(dat, Sex=="M" & Diet=="hf") %>% select(Bodyweight) %>% unlist
# ex5
#' Now use the rafalib package and use the popsd() function to compute
#' the population standard deviation.
popsd(y)
# ex8
#' Repeat the above for females, this time setting the seed to 2.
#' Q: What is the difference in absolute value between  y¯−x¯  and  Y¯−X¯ ?
#' Make sure to set the seed to 2 before each sample() call.
#' This function should be called twice.
x <- filter(dat, Sex=="F" & Diet=="chow") %>% select(Bodyweight) %>% unlist
popsd(x)
y <- filter(dat, Sex=="F" & Diet=="hf") %>% select(Bodyweight) %>% unlist
popsd(y)
# ex2
#' Now use the rafalib package and use the popsd() function to compute
#' the population standard deviation.
mxst <- popsd(x)
# ex5
#' Now use the rafalib package and use the popsd() function to compute
#' the population standard deviation.
mystd <- popsd(y)
# ex2
#' Now use the rafalib package and use the popsd() function to compute
#' the population standard deviation.
mxstd <- popsd(x)
dat <- na.omit( dat )
head(dat)
# ex1
#' Use dplyr to create a vector x with the body weight of all males on the control (chow) diet.
#' Q: What is this population's average?
x <- filter(dat, Sex=="M" & Diet=="chow") %>% select(Bodyweight) %>% unlist
mean(x)
# ex2
#' Now use the rafalib package and use the popsd() function to compute
#' the population standard deviation.
mxstd <- popsd(x)
# ex3
#' Set the seed at 1. Take a random sample  X  of size 25 from x.
#' Q: What is the sample average?
set.seed(1)
X <- sample(x, 25)
mean(X)
# ex4
#' Use dplyr to create a vector y with the body weight of all males on
#' the high fat hf) diet.
#' Q: What is this population's average?
y <- filter(dat, Sex=="M" & Diet=="hf") %>% select(Bodyweight) %>% unlist
mean(y)
# ex5
#' Now use the rafalib package and use the popsd() function to compute
#' the population standard deviation.
mystd <- popsd(y)
# ex6
#' Set the seed at 1. Take a random sample  Y  of size 25 from y.
#' Q: What is the sample average?
set.seed(1)
Y <- sample(y, 25)
mean(Y)
# ex7
#' What is the difference in absolute value between  y¯−x¯  and  Y¯−X¯?
abs((mean(y)-mean(x)) - (mean(Y)-mean(X)))
# ex8
#' Repeat the above for females, this time setting the seed to 2.
#' Q: What is the difference in absolute value between  y¯−x¯  and  Y¯−X¯ ?
#' Make sure to set the seed to 2 before each sample() call.
#' This function should be called twice.
x <- filter(dat, Sex=="F" & Diet=="chow") %>% select(Bodyweight) %>% unlist
fxstd <- popsd(x)
set.seed(2)
X <- sample(x, 25)
mean(X)
y <- filter(dat, Sex=="F" & Diet=="hf") %>% select(Bodyweight) %>% unlist
fystd <- popsd(y)
set.seed(2)
Y <- sample(y, 25)
mean(Y)
abs((mean(y)-mean(x)) - (mean(Y)-mean(X)))
mxstd > fxstd
mystd > fystd
library(downloader)
url <- "https://raw.githubusercontent.com/genomicsclass/dagdata/master/inst/extdata/mice_pheno.csv"
filename <- basename(url)
download(url, destfile=filename)
dat <- na.omit( read.csv(filename) )
head(dat)
avg <- mean(dat$Bodyweight)
avg
# ex1
#' Q: If a list of numbers has a distribution that is well approximated
#' by the normal distribution, what proportion of these numbers are
#' within one standard deviation away from the list's average?
x <- dat$Bodyweight
x
avg <- mean(x)
std <- popsd(x)
# ex1
#' Q: If a list of numbers has a distribution that is well approximated
#' by the normal distribution, what proportion of these numbers are
#' within one standard deviation away from the list's average?
x <- dat$Bodyweight
avg <- mean(x)
std <- popsd(x)
pnorm(x, mean = avg, sd = std)
# ex1
#' Q: If a list of numbers has a distribution that is well approximated
#' by the normal distribution, what proportion of these numbers are
#' within one standard deviation away from the list's average?
x <- unlist(dat$Bodyweight)
mu <- mean(x)
sigma <- popsd(x)
pnorm(x, mu, sigma)
?pnorm
pnorm(1)-pnorm(-1)
#' What proportion of these numbers are within two standard deviations away
#' from the list's average?
pnorm(2) - pnorm(-2)
x3
#' What proportion of these numbers are within three standard deviations
#'
pnorm(3) - pnorm(-3)
# ex4
#' Define y to be the weights of males on the control diet. What proportion of
#' the mice are within one standard deviation away from the average weight?
#' Remember to use popsd() from rafalib for the population standard deviation.
# ex4
#' Define y to be the weights of males on the control diet. What proportion of
#' the mice are within one standard deviation away from the average weight?
#' Remember to use popsd() from rafalib for the population standard deviation.
#' We want to know how close is the average of a random sample to the
#' population average. The central limit theorem helps us answer that.
library(dplyr)
# ex4
#' Define y to be the weights of males on the control diet. What proportion of
#' the mice are within one standard deviation away from the average weight?
#' Remember to use popsd() from rafalib for the population standard deviation.
y <- filter(dat, Sex == "M" & Diet == "chow") %>% select(Bodyweight) %>% unlist
y
mu <- mean(y)
sigma <- popsd(y)
# ex4
#' Define y to be the weights of males on the control diet.
#' Q: What proportion of the mice are within one standard deviation
#' away from the average weight?
#' Remember to use popsd() from rafalib for the population standard deviation.
y <- filter(dat, Sex == "M" & Diet == "chow") %>% select(Bodyweight) %>% unlist
mu <- mean(y)
sigma <- popsd(y)
pnorm(1, mu, sigma) - pnorm(-1, mu, sigma)
pnorm(1, mu, sigma)
mu
sigma
popsd(y)
sd(y)
popsd(y) == sd(y) / sqrt(length(y))
popsd(y)
sd(y) / sqrt(length(y))
length(y)
sqrt(223)
#' A:
z <- (y - mean(y)) / popsd(y)
z
#' A:
#' z-score (also called a standard score) gives you an idea of how far from
#' the mean a data point is. But more technically it’s a measure of how many
#' standard deviations below or above the population mean a raw score is.
#' z = (x – μ) / σ
z <- (y - mean(y)) / popsd(y)
mean(abs(z) <= 1)
# ex5
#' Q: What proportion of these numbers are within two standard
#' deviations away from the list's average?
mean(abs(z) <= 2)
# ex6
#' Q: What proportion of these numbers are within three standard
#' deviations away from the list's average?
mean(abs(z) <= 3)
# ex7
#' Note that the numbers for the normal distribution and our weights
#' are relatively close. Also, notice that we are indirectly comparing
#' quantiles of the normal distribution to quantiles of the mouse weight
#' distribution. We can actually compare all quantiles using a qqplot.
qqnorm(z)
abline(0,1)
# ex8
#' Create the above qq-plot for the four populations: male/females on each of
#' the two diets. What is the best explanation for all these mouse weights
#' being well approximated by the normal distribution?
mypar(2,2)
y <- filter(dat, Sex=="M" & Diet=="chow") %>% select(Bodyweight) %>% unlist
z <- ( y - mean(y) ) / popsd(y)
qqnorm(z);abline(0,1)
y <- filter(dat, Sex=="F" & Diet=="chow") %>% select(Bodyweight) %>% unlist
z <- ( y - mean(y) ) / popsd(y)
qqnorm(z);abline(0,1)
y <- filter(dat, Sex=="M" & Diet=="hf") %>% select(Bodyweight) %>% unlist
z <- ( y - mean(y) ) / popsd(y)
qqnorm(z);abline(0,1)
y <- filter(dat, Sex=="F" & Diet=="hf") %>% select(Bodyweight) %>% unlist
z <- ( y - mean(y) ) / popsd(y)
qqnorm(z);abline(0,1)
# A
# A
#' This just happens to be how nature behaves in this particular case.
#' We can see that, as predicted by the CLT, the distribution of the random
#' variable is very well approximated by the normal distribution.
set.seed(1)
avgs <- replicate(10000, mean( sample(y, 25)))
mypar(1,2)
hist(avgs)
qqnorm(avgs)
qqline(avgs)
#' Q: What is the average of the distribution of the sample average?
mean(avgs)
#' We can see that, as predicted by the CLT, the distribution of the random
#' variable is very well approximated by the normal distribution.
y <- filter(dat, Sex=="M" & Diet=="chow") %>% select(Bodyweight) %>% unlist
set.seed(1)
avgs <- replicate(10000, mean( sample(y, 25)))
mypar(1,2)
hist(avgs)
qqnorm(avgs)
qqline(avgs)
#' Q: What is the average of the distribution of the sample average?
mean(avgs)
# ex10
#' Q: What is the standard deviation of the distribution of sample averages?
popsd(avgs)
